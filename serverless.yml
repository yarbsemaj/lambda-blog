service: blog-backend

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: "20201221"
  environment:
    USER: ${ssm:/blog-admin-user~true}
    POST_TABLE: ${self:service}-posts
    CF_DISTRIBUTION_ID: EK3G06SE1JH4Y

  region: eu-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["postsTable", "Arn"] }
        - Fn::Join:
            - "/"
            - - { "Fn::GetAtt": ["postsTable", "Arn"] }
              - "index/*"
    - Effect: Allow
      Action:
        - cloudfront:ListDistributions
        - cloudfront:CreateInvalidation
      Resource: "*"

functions:
  authoriser:
    handler: lambda/authoriser/authoriser.handler
    memorySize: 128

  healthCheck:
    handler: lambda/web/get.get
    memorySize: 128
    events:
      - http:
          path: blog/api/
          method: get
          cors: true

  login:
    handler: lambda/web/get.get
    memorySize: 128
    events:
      - http:
          path: blog/api/login
          method: post
          cors: true
          authorizer: authoriser

  #Posts
  listPosts:
    handler: lambda/web/posts/list.list
    memorySize: 128
    events:
      - http:
          path: blog/api/posts
          method: get
          cors: true

  listAllPosts:
    handler: lambda/web/posts/all.list
    memorySize: 128
    events:
      - http:
          path: blog/api/posts/all
          method: get
          cors: true
          authorizer: authoriser

  createPost:
    handler: lambda/web/posts/post.post
    memorySize: 128
    timeout: 15
    events:
      - http:
          path: blog/api/posts
          method: post
          cors: true
          authorizer: authoriser
  updatePost:
    handler: lambda/web/posts/put.put
    memorySize: 128
    timeout: 15
    events:
      - http:
          path: blog/api/posts/{id}
          method: put
          cors: true
          authorizer: authoriser
  getPost:
    handler: lambda/web/posts/get.get
    memorySize: 128
    events:
      - http:
          path: blog/api/posts/{id}
          method: get
          cors: true
  editPost:
    handler: lambda/web/posts/edit.get
    memorySize: 128
    events:
      - http:
          path: blog/api/posts/{id}/edit
          method: get
          cors: true
          authorizer: authoriser
  removePost:
    handler: lambda/web/posts/delete.delete
    memorySize: 128
    events:
      - http:
          path: blog/api/posts/{id}
          method: delete
          cors: true
          authorizer: authoriser

resources:
  Resources:
    postsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-posts
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: createdDate
            AttributeType: S
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: status-createdDate-index
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: createdDate
                KeyType: RANGE
            Projection:
              ProjectionType: "INCLUDE"
              NonKeyAttributes: 
                - "id"
                - "title"
                - "body"
                - "image"
                - "description"
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
